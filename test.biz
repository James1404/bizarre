const a = 25;
const b = a * a;

const println = 25 + 2;

const factorial = fn(n: i32) i32 {
      return if x < 2 {
             1
      } else {
             n * factorial(n - 1)
      };
};

const Allocator = interface {
     alloc: fn(T: type) ptr(type);
     dealloc: fn(ptr: ptr(any)) void;
};

const ArenaAllocator = struct {
      alloc = fn(T: type) ptr(type) {};
      dealloc = fn(ptr: ptr(any)) void {};
};

const Vector = comptime fn(T: type) type {
      return struct {
             items: ptr(T);
             len: usize;
      };
};

const r = comptime fn() void {};

const x = fn() int {
      return 25;
} ();

/*
Types:
 - i8, i16, i32, i64, isize,
 - u8, u16, u32, u64, usize,
 - f32, f64,
 - bool,
 - string,
 - Array: [type;size],
 - Slice: [type],
 - Tuple: (i32, f32, string, bool, struct {}),
 - any,
 - comptime only types:
   - type,
*/

const doubleTwice = fn(n: i32) i32 {
      var a = n * 2;
      a = a * 2;
      return a;
};
